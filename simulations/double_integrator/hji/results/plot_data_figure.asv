% This script visualizes all results in a single figure with two subplots,
% separated by the disturbance parameter sigma.
clear; clc;
close all;
fprintf('Plotting results from Julia simulation...\n');

% ---------------------------
% Load Data (No changes here)
% ---------------------------
try
    Z_lambda_0_sigma_0 = readmatrix('Value_function_lambda_0_sigma_0.txt');
    Z_lambda_2_sigma_0 = readmatrix('Value_function_lambda_2_sigma_0.txt');
    Z_lambda_2_sigma_0_L_sqrt5 = readmatrix('Value_function_lambda_2_sigma_0_lsqrt(5).txt');
    Z_lambda_2_sigma_1_L_sqrt5 = readmatrix('Value_function_lambda_2_sigma_1_lsqrt(5).txt');
    Z_lambda_0_sigma_1 = readmatrix('Value_function_lambda_0_sigma_1.txt');
    Z_lambda_2_sigma_1 = readmatrix('Value_function_lambda_2_sigma_1.txt');


    Z_interpolation_path_2 = "/Users/saber/Desktop/Safety/simulations/double_integrator/hji/interpolation_results/Value_function_lambda_0.2.txt";
    Z_Int_2 = readmatrix(Z_interpolation_path_2);

    Z_interpolation_path_0 = "/Users/saber/Desktop/Safety/simulations/double_integrator/hji/interpolation_results/Value_function_lambda_0.0.txt";
    Z_Int_0 = readmatrix(Z_interpolation_path_0);

    Z_interpolation_path_sigma_1 = '/Users/saber/Desktop/Safety/simulations/double_integrator/hji/interpolation_results_2player/Value_function_lambda_0.0_2player.txt';
    Z_Int_sigma_1= readmatrix(Z_interpolation_path_sigma_1);


    Path_G_sigma_0 = "/Users/saber/Desktop/Safety/simulations/double_integrator/average_reward/results_primal/0.0/G.csv";
    Path_G_sigma_1 = "/Users/saber/Desktop/Safety/simulations/double_integrator/average_reward/results_primal/1.0/G.csv";
    G_average_sigma_0 = readmatrix(Path_G_sigma_0)';
    G_average_sigma_1 = readmatrix(Path_G_sigma_1)';
    fprintf('Successfully loaded data files.\n');
catch ME
    error('Could not find or read a required data file. Please check file paths. Error: %s', ME.message);
end

% ---------------------------
% Reconstruct Grid (No changes here)
% ---------------------------
NUM_POINTS_STATE_1 = 161;
NUM_POINTS_STATE_2 = size(G_average_sigma_0, 2);
if size(Z_lambda_0_sigma_0, 2) ~= NUM_POINTS_STATE_2
    NUM_POINTS_STATE_2 = size(Z_lambda_0_sigma_0, 2);
end
x1 = linspace(-1, 5, NUM_POINTS_STATE_1);
x2 = linspace(-5, 5, NUM_POINTS_STATE_2);

% ---------------------------
% Plotting in a Single Figure with Two Subplots
% ---------------------------
figure('Position', [100, 100, 1400, 700]); % Create a wider figure for side-by-side plots
sgtitle('Comparison of Methods With and Without Disturbance', 'Interpreter', 'latex', 'FontSize', 18);

%% Subplot 1: Left (All results for sigma = 0)
subplot(1, 2, 1);
hold on;
plotBoxAndCorners();

% Plot all four sigma=0 contours
contour(x1, x2, Z_lambda_0_sigma_0', [0.0, 0.0], "LineWidth", 2.5, "Color", "#0000CD", 'LineStyle', '-', 'DisplayName', 'MDR: $\lambda=0.0, L=2\sqrt{5}$');
contour(x1, x2, Z_lambda_2_sigma_0', [0.0, 0.0], "LineWidth", 2.5, "Color", "#1E90FF", 'LineStyle', '--', 'DisplayName', 'MDR: $\lambda=0.2, L=2\sqrt{5}$');
contour(x1, x2, Z_lambda_2_sigma_0_L_sqrt5', [0.0, 0.0], "LineWidth", 2.5, "Color", "#483D8B", 'LineStyle', ':', 'DisplayName', 'MDR: $\lambda=0.2, L=\sqrt{5}$');
contour(x1, x2, Z_Int_2', [0.0, 0.0], "LineWidth", 2.5, "Color", "#FF00FF", 'LineStyle', '-.', 'DisplayName', 'MDR (Interpolation): $\lambda=0.2, L=\sqrt{5}$');
contour(x1, x2, Z_Int_0', [0.0, 0.0], "LineWidth", 3, "Color", "#FF0000", 'LineStyle', '-', 'DisplayName', 'MDR (Interpolation): $\lambda=0.0, L=\sqrt{5}$');

contour(x1, x2, G_average_sigma_0', [1.0, 1.0], "LineWidth", 2.5, "Color", "#006400", 'LineStyle', '-', 'DisplayName', 'Average Reward');
hold off;
setupSubplotAxes('Results for $\sigma=0.0$ (No Disturbance)');

%% Subplot 2: Right (All results for sigma = 1)
subplot(1, 2, 2);
hold on;
plotBoxAndCorners();

% Plot all four sigma=1 contours
contour(x1, x2, Z_lambda_0_sigma_1', [0.0, 0.0], "LineWidth", 2.5, "Color", "#FF4500", 'LineStyle', '-', 'DisplayName', 'MDR: $\lambda=0.0, L=2\sqrt{5}$');
contour(x1, x2, Z_lambda_2_sigma_1', [0.0, 0.0], "LineWidth", 2.5, "Color", "#FFA500", 'LineStyle', '--', 'DisplayName', 'MDR: $\lambda=0.2, L=2\sqrt{5}$');
contour(x1, x2, Z_lambda_2_sigma_1_L_sqrt5', [0.0, 0.0], "LineWidth", 2.5, "Color", "#9400D3", 'LineStyle', ':', 'DisplayName', 'MDR: $\lambda=0.2, L=\sqrt{5}$');
contour(x1, x2, G_average_sigma_1', [1.0, 1.0], "LineWidth", 2.5, "Color", "#228B22", 'LineStyle', '-', 'DisplayName', 'Average Reward');

contour(x1, x2, Z_Int_sigma_1', [0.0, 0.0], "LineWidth", 3, "Color", "blue", 'LineStyle', '-', 'DisplayName', 'MDR (Interpolation): $\lambda=0.0, L=\sqrt{5}$');

hold off;
setupSubplotAxes('Results for $\sigma=1.0$ (With Disturbance)');


%% calculating the proportion of safe set for each value function
total=NUM_POINTS_STATE_1*NUM_POINTS_STATE_2;

count_G_average_sigma_0 =nnz(G_average_sigma_0 == 1);
count_G_average_sigma_1 =nnz(G_average_sigma_1 == 1);

count_Z_Int_0 =nnz(Z_Int_0 >= 0);
count_Z_Int_2 =nnz(Z_Int_2 >= 0);

count_Z_Int_sigma_1 = nnz(Z_Int_sigma_1>= 0);


% ---------------------------
% Helper Functions (place at the end of your script)
% ---------------------------
function plotBoxAndCorners()
    K1_MIN = 0.0; K1_MAX = 4.0; K2_MIN = -3.0; K2_MAX = 3.0;
    box_x = [K1_MIN, K1_MAX, K1_MAX, K1_MIN, K1_MIN];
    box_y = [K2_MIN, K2_MIN, K2_MAX, K2_MAX, K2_MIN];
    plot(box_x, box_y, 'k-', 'LineWidth', 1.5, 'DisplayName', 'Safe Set Boundary');
    corners_x = [4, 0, 4, 0]; corners_y = [-3, -3, 3, 3];
    plot(corners_x, corners_y, 'o', 'MarkerFaceColor', 'k', 'MarkerEdgeColor', 'k', 'MarkerSize', 8, 'HandleVisibility', 'off');
end

function setupSubplotAxes(title_text)
    grid on; axis equal;
    title(title_text, 'Interpreter', 'latex', 'FontSize', 14);
    xlabel('State $x_1$', 'Interpreter', 'latex');
    ylabel('State $x_2$', 'Interpreter', 'latex');
    lgd = legend('show');
    set(lgd, 'Interpreter', 'latex', 'Location', 'northeast');
end